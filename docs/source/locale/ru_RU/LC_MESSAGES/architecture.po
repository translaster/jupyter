# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Jupyter Team, https://jupyter.org
# This file is distributed under the same license as the Jupyter
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Jupyter Documentation 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-09 11:43+0000\n"
"PO-Revision-Date: 2020-07-07 17:04+0500\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Last-Translator: Dmitriy Q <dmitry@atsip.ru>\n"
"Language-Team: TranslAster <https://github.com/translaster>\n"
"Language: ru_RU\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../source/architecture/content-architecture.rst:2
#: 04a592c2e0e14cb88b8949274458ab02
msgid "Architecture"
msgstr "Архитектура"

# 8ce5c1bb3b244604b361cd2384066f68
#: ../../source/architecture/how_jupyter_ipython_work.rst:2
#: 25e51cdaa6ad4141a40d0e1be390f7b7
msgid "How IPython and Jupyter Notebook work"
msgstr "Как работают блокноты IPython и Jupyter"

# 242c15d658d64a13a2b8b13502845298
#: ../../source/architecture/how_jupyter_ipython_work.rst:5
#: 687e9f41746f426d8fd3c6d2ff04f0be
msgid "Contents"
msgstr "Содержание"

# a7b9fc6771f845528e8f7135c51754fa
#: ../../source/architecture/how_jupyter_ipython_work.rst:8
#: b22cb4cedb2a4dd7a5d8b3e140c5dce0
msgid "Abstract"
msgstr "Абстрактный"

# 3b9b38491da4493b95225b77bcd32438
#: ../../source/architecture/how_jupyter_ipython_work.rst:9
#: 8b41e8b95e3648fdb8c1e12bd10047a8
msgid ""
"This section focuses on IPython and Jupyter notebook and how they "
"interact. When we discuss ``IPython``, we talk about two fundamental "
"roles:"
msgstr ""
"Этот раздел посвящен IPython и блокноту Jupyter и тому, как они "
"взаимодействуют. Когда мы обсуждаем ``IPython`` - мы говорим о двух "
"фундаментальных ролях:"

# 676993980a9e4a9082f9f313e09af108
#: ../../source/architecture/how_jupyter_ipython_work.rst:12
#: efbc9c82efb3494eb0ef46533d4c0924
msgid "Terminal IPython as the familiar REPL"
msgstr "Терминал IPython в качестве знакомого REPL"

# 5164fcd91a8a4700ac734562245773ad
#: ../../source/architecture/how_jupyter_ipython_work.rst:13
#: f68a21b0bc884dad9021c276e6490e6d
msgid ""
"The IPython kernel that provides computation and communication with the "
"frontend interfaces, like the notebook"
msgstr ""
"Ядро IPython, обеспечивающее вычисления и связь с интерфейсами "
"фронтенда, например с блокнотом"

# e79b4b9cf0d4461e8c91e35c54941346
#: ../../source/architecture/how_jupyter_ipython_work.rst:16
#: 720c357978444cc4aa9e36fc9cf37ca8
msgid ""
"Jupyter Notebook and its flexible interface extends the notebook beyond "
"code to visualization, multimedia, collaboration, and more."
msgstr ""
"Jupyter Notebook и его гибкий интерфейс расширяют возможности блокнота "
"за пределами кода до визуализации, мультимедиа, совместной работы и "
"многого другого."

# f0e8484a13374e5ba11bc5673feecc30
#: ../../source/architecture/how_jupyter_ipython_work.rst:20
#: 8315a95a71c0460a90010aac63c7115b
msgid "Terminal IPython"
msgstr "Терминал IPython"

# d52946417b8a4a04a551622ce78e0c78
#: ../../source/architecture/how_jupyter_ipython_work.rst:22
#: b22c49e1597e475b97c9737ceb781846
msgid ""
"When you type ``ipython``, you get the original IPython interface, "
"running in the terminal. It does something like this::"
msgstr ""
"Когда вы набираете ``ipython`` - вы получаете оригинальный интерфейс "
"IPython, работающий в терминале. Он делает что-то вроде этого::"

# 9c51878d67554820815080da49295cb3
#: ../../source/architecture/how_jupyter_ipython_work.rst:29
#: a57011517da44ffdb1a1030a5a12e04f
msgid ""
"Of course, it's much more complex, because it has to deal with multi-"
"line code, tab completion using :mod:`readline`, magic commands, and so "
"on. But the model is like code example: prompt the user for some code, "
"and when they've entered it, execute it in the same process. This model "
"is often called a :term:`REPL`, or Read-Eval-Print-Loop."
msgstr ""
"Конечно, это гораздо сложнее, потому что он имеет дело с многострочным "
"кодом, завершением вкладки с помощью :mod:`eadline`, волшебными "
"командами и так далее. Но модель похожа на пример кода: запросите у "
"пользователя какой-то код, и когда он его введет, выполните его в том же "
"процессе. Эта модель часто называется :term:`REPL` или Read-Eval-Print-"
"Loop (Чтение-оценка-вывод-петля)."

# 6948d86fd4fd47a1a4ca54d29e72d46e
#: ../../source/architecture/how_jupyter_ipython_work.rst:36
#: aa66c41337a049ee897b94995b8d1ac6
msgid "The IPython Kernel"
msgstr "Ядро IPython"

# 61f9b43b0f3148a1b6c8c770dbe95970
#: ../../source/architecture/how_jupyter_ipython_work.rst:38
#: ddad0e1e2ec94469a57fd7b28841916b
msgid ""
"All the other interfaces —- the Notebook, the Qt console, ``ipython "
"console`` in the terminal, and third party interfaces —- use the IPython "
"Kernel. The IPython Kernel is a separate process which is responsible "
"for running user code, and things like computing possible completions. "
"Frontends, like the notebook or the Qt console, communicate with the "
"IPython Kernel using JSON messages sent over `ZeroMQ <http://zeromq.org/"
">`_ sockets; the protocol used between the frontends and the IPython "
"Kernel is described in :ref:`jupyterclient:messaging`."
msgstr ""
"Все остальные интерфейсы -- Notebook, консоль Qt, ``консоль IPython`` в "
"терминале и сторонние интерфейсы - используют ядро IPython. Ядро IPython "
"- это отдельный процесс, отвечающий за запуск пользовательского кода и "
"такие вещи, как вычисление возможных завершений. Интерфейсы, такие как "
"блокнот или консоль Qt, взаимодействуют с ядром IPython с помощью "
"сообщений JSON, отправляемых через `ZeroMQ <http://zeromq.org/>`_ "
"sockets; протокол, используемый между интерфейсами и ядром IPython, "
"описан в разделе :ref:`jupyterclient:messaging'."

# 6560f963da914c78b12c61e8795a9852
#: ../../source/architecture/how_jupyter_ipython_work.rst:47
#: f9c6433f12e749daa2b348d56f91c316
msgid ""
"The core execution machinery for the kernel is shared with terminal "
"IPython:"
msgstr ""
"Механизм выполнения ядра для совместного использования ядра с терминалом "
"IPython:"

# b5bd0a2f608542fe92f8b57ddcb9ea7b
#: ../../source/architecture/how_jupyter_ipython_work.rst:51
#: db6bdb4f027d4fbd984e6f7e3e7c0e6b
msgid ""
"A kernel process can be connected to more than one frontend "
"simultaneously. In this case, the different frontends will have access "
"to the same variables."
msgstr ""
"Процесс ядра может быть подключен одновременно к нескольким интерфейсам. "
"В этом случае разные интерфейсы будут иметь доступ к одним и тем же "
"переменным."

# 59dd6f3fbb4a46008c898b307aec5a25
#: ../../source/architecture/how_jupyter_ipython_work.rst:56
#: 58c4a9fd65a04bdab3d904cdcc3d304d
msgid ""
"This design was intended to allow easy development of different "
"frontends based on the same kernel, but it also made it possible to "
"support new languages in the same frontends, by developing kernels in "
"those languages, and we are refining IPython to make that more practical."
msgstr ""
"Эта конструкция была предназначена для облегчения разработки различных "
"интерфейсов на основе одного и того же ядра, но она также позволила "
"поддерживать новые языки в одних и тех же интерфейсах, разрабатывая ядра "
"на этих языках, и мы совершенствуем IPython, чтобы сделать это более "
"практичным."

# e35918a2fb124784a83c135812faf800
#: ../../source/architecture/how_jupyter_ipython_work.rst:61
#: 3c29c3b88df44bea8b85717ec4fa3999
msgid ""
"Today, there are two ways to develop a kernel for another language. "
"Wrapper kernels reuse the communications machinery from IPython, and "
"implement only the core execution part. Native kernels implement "
"execution and communications in the target language:"
msgstr ""
"Сегодня существует два способа разработки ядра для другого языка. Ядра-"
"оболочки повторно используют коммуникационное оборудование IPython и "
"реализуют только часть выполнения ядра. Нативные ядра реализуют "
"выполнение и коммуникацию на целевом языке:"

# 3395f44193b54f5cb9b9d380fa4a16bd
#: ../../source/architecture/how_jupyter_ipython_work.rst:68
#: 171b6be9dd384c76aff7ced29d49d10c
msgid ""
"Wrapper kernels are easier to write quickly for languages that have good "
"Python wrappers, like `octave_kernel <https://pypi.python.org/pypi/"
"octave_kernel>`_, or languages where it's impractical to implement the "
"communications machinery, like `bash_kernel <https://pypi.python.org/"
"pypi/bash_kernel>`_. Native kernels are likely to be better maintained "
"by the community using them, like `IJulia <https://github.com/JuliaLang/"
"IJulia.jl>`_ or `IHaskell <https://github.com/gibiansky/IHaskell>`_."
msgstr ""
"Ядра-оболочки обычно легче писать для языков, которые имеют хорошие "
"оболочки Python, например `octave_kernel <https://pypi.python.org/pypi/"
"octave_kernel>`_, или языки, где нецелесообразно реализовывать "
"коммуникационный механизм, например `bash_kernel <https://pypi.python."
"org/pypi/bash_kernel>`_. Нативные ядра, вероятно, будут лучше "
"поддерживаться сообществом, использующим их, например `Julia <https://"
"github.com/JuliaLang/IJulia.jl>`_ или `IHaskell <https://github.com/"
"gibiansky/IHaskell>`_."

# 59d8323c382a4adeb3d622424943b708
#: ../../source/architecture/how_jupyter_ipython_work.rst:78
#: 7928cfc99c54405f8e1e3e8064a17a90
msgid ":ref:`jupyterclient:kernels`"
msgstr ":ref:`jupyterclient:kernels`"

# 3418914ee39240879155089a0b29a69e
#: ../../source/architecture/how_jupyter_ipython_work.rst:80
#: e78549052f6d43869ba3cfbd3a7034c2
msgid ":ref:`Kernels <kernels-langs>`"
msgstr ":ref:`Ядра <kernels-langs>`"

# 4866548d799b4cfc95159d7494d66afb
#: ../../source/architecture/how_jupyter_ipython_work.rst:83
#: eb329833752e41368f1cd82349c5208a
msgid "Notebooks"
msgstr "Блокноты"

# f414110d9cde4b048d6d4d0c65f274dd
#: ../../source/architecture/how_jupyter_ipython_work.rst:85
#: 9280abf2d8df488aa89e68d671465b39
msgid ""
"The Notebook frontend does something extra. In addition to running your "
"code, it stores code and output, together with markdown notes, in an "
"editable document called a notebook. When you save it, this is sent from "
"your browser to the notebook server, which saves it on disk as a JSON "
"file with a ``.ipynb`` extension."
msgstr ""
"Фронтенд блокнота делает что-то дополнительное. Помимо выполнения кода, "
"он хранит код и выходные данные вместе с заметками markdown в "
"редактируемом документе, называемом блокнотом. Когда вы сохраняете его - "
"он отправляется из Вашего браузера на сервер блокнота, который сохраняет "
"его на диске в виде файла JSON с расширение ``.ipynb``."

# ce4a6fb377344df295e9512b1d36743c
#: ../../source/architecture/how_jupyter_ipython_work.rst:93
#: 9907fce266fa40e782afee325887acff
msgid ""
"The notebook server, not the kernel, is responsible for saving and "
"loading notebooks, so you can edit notebooks even if you don't have the "
"kernel for that language—you just won't be able to run code. The kernel "
"doesn't know anything about the notebook document: it just gets sent "
"cells of code to execute when the user runs them."
msgstr ""
"Сервер блокнота, а не ядро, отвечает за сохранение и загрузку блокнотов, "
"поэтому вы можете редактировать блокноты, даже если у вас нет ядра для "
"этого языка — вы просто не сможете запускать код. Ядро ничего не знает о "
"документе в блокноте: оно просто получает ячейки кода для выполнения, "
"когда пользователь запускает их."

# 9041dc2c7e0b46e19e1694f6bb081592
#: ../../source/architecture/how_jupyter_ipython_work.rst:100
#: c3266e1732cb4aa2814235415987b906
msgid "Exporting notebooks to other formats"
msgstr "Экспорт блокнотов в другие форматы"

# dedd7458edfc44a99f423e2a9b8e1d93
#: ../../source/architecture/how_jupyter_ipython_work.rst:102
#: 3651253339d0470bbe2a44c6c85504c2
msgid ""
"The Nbconvert tool in Jupyter converts notebook files to other formats, "
"such as HTML, LaTeX, or reStructuredText. This conversion goes through a "
"series of steps:"
msgstr ""
"Инструмент Nbconvert в Jupiter преобразует файлы блокнота в другие "
"форматы, такие как HTML, LaTeX или reStructuredText. Это преобразование "
"проходит через ряд шагов:"

# 082ebb9d5777479da8f71672f538c484
#: ../../source/architecture/how_jupyter_ipython_work.rst:108
#: 390c0aebaa9841fb9712fd47d68925ec
msgid ""
"Preprocessors modify the notebook in memory. E.g. ExecutePreprocessor "
"runs the code in the notebook and updates the output."
msgstr ""
"Препроцессоры модифицируют блокнот в памяти. Например, препроцессор "
"Execute запускает код в блокноте и обновляет выходные данные."

# c6be8db7ca164f379d97800723004956
#: ../../source/architecture/how_jupyter_ipython_work.rst:110
#: 5aabdaca5d7a4f9c82a427d0d4c61ae9
msgid ""
"An exporter converts the notebook to another file format. Most of the "
"exporters use templates for this."
msgstr ""
"Экспортер преобразует блокнот в другой формат файла. Большинство "
"экспортеров используют для этого шаблоны."

# 9de2fa198489488fa316b950d1228fa3
#: ../../source/architecture/how_jupyter_ipython_work.rst:112
#: 1486337c796a45b3b8c7b76b779583d7
msgid "Postprocessors work on the file produced by exporting."
msgstr "Постпроцессоры работают над файлом, полученным при экспорте."

# e00d7f3b870a40879882ee53ed417463
#: ../../source/architecture/how_jupyter_ipython_work.rst:114
#: 57a79078ba184f16abf460671fd323d0
msgid ""
"The `nbviewer <http://nbviewer.jupyter.org/>`_ website uses nbconvert "
"with the HTML exporter. When you give it a URL, it fetches the notebook "
"from that URL, converts it to HTML, and serves that HTML to you."
msgstr ""
"Вебсайт `nbviewer <http://nbviewer.jupyter.org/>`_ использует nbconvert "
"с экспортером HTML. Когда вы даете ему URL-адрес - он извлекает блокнот "
"из этого URL-адреса, преобразует его в HTML и передает вам этот HTML-код."

# e30efeea3614465f95ff49220796d182
#: ../../source/architecture/how_jupyter_ipython_work.rst:119
#: fcfdde91391349869d1505c25ccb3ffe
msgid "IPython.parallel"
msgstr "IPython.parallel"

# 074d0dac254c44b58ea96c7b4a451d27
#: ../../source/architecture/how_jupyter_ipython_work.rst:121
#: c08fcd5dd0964380b1fe07b5eab8587a
msgid ""
"IPython also includes a parallel computing framework, `IPython.parallel "
"<https://ipyparallel.readthedocs.io/en/latest/>`_. This allows you to "
"control many individual engines, which are an extended version of the "
"IPython kernel described above."
msgstr ""
"IPython также включает в себя параллельную вычислительную платформу, "
"`IPython.parallel <https://ipyparallel.readthedocs.io/en/latest/>`_. Это "
"позволяет управлять многими отдельными движками, которые являются "
"расширенной версией ядра IPython, описанного выше."

# 0118a72a2b1e4c14800c1c3dd77b6c4e
#: ../../source/architecture/visual_overview.rst:2
#: 369edc8bf26f4c7f801163bc99e9efb3
msgid "A Visual Overview of Projects"
msgstr "Визуальный обзор проектов"

# cc1b649f66b949ebb3984ea361c9ee45
#: ../../source/architecture/visual_overview.rst:4
#: 14bef48689614e35bdb34fe3c6c836c6
msgid "**A high level visual overview of project relationships**"
msgstr "**Высокоуровневый визуальный обзор проектных взаимосвязей**"
